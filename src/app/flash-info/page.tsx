
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useUser } from '@/context/UserContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Loader2, Lightbulb, AlertTriangle, Home } from 'lucide-react';
import type { GeneratedQuiz } from '@/types';
import { useToast } from '@/hooks/use-toast';

const ACTIVE_QUIZ_DATA_KEY = 'quizwhiz_active_quiz_data';

export default function FlashInfoPage() {
  const router = useRouter();
  const { user, isLoading: userLoading } = useUser();
  const { toast } = useToast();
  const [flashInfo, setFlashInfo] = useState<string | null | undefined>(undefined); // undefined initially, null if not found after load
  const [isLoading, setIsLoading] = useState(true);
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    if (!isClient || userLoading) return;

    if (!user) {
      toast({ title: 'Authentication Required', description: 'Please log in to view flash information.', variant: 'destructive' });
      router.push('/register');
      return;
    }

    const activeQuizJson = localStorage.getItem(ACTIVE_QUIZ_DATA_KEY);
    if (activeQuizJson) {
      try {
        const quizData = JSON.parse(activeQuizJson) as GeneratedQuiz;
        if (quizData && typeof quizData.flashInformation === 'string' && quizData.flashInformation.trim() !== '') {
          setFlashInfo(quizData.flashInformation);
        } else {
          setFlashInfo(null); // Explicitly set to null if flashInformation is empty, missing, or not a string
        }
      } catch (error) {
        console.error('Error parsing quiz data for flash info:', error);
        toast({ title: 'Error Loading Data', description: 'Could not parse stored content.', variant: 'destructive' });
        setFlashInfo(null);
      }
    } else {
      setFlashInfo(null); // No active quiz data found
      toast({ title: 'No Content Available', description: 'No quiz or flash information has been generated by an admin yet.', variant: 'destructive' });
    }
    setIsLoading(false);
  }, [isClient, user, userLoading, router, toast]);

  if (!isClient || isLoading || userLoading) {
    return (
      <div className="flex justify-center items-center min-h-[60vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-lg">Loading Flash Information...</p>
      </div>
    );
  }
  
  return (
    <div className="flex flex-col items-center justify-center py-8">
      <Card className="w-full max-w-2xl shadow-xl">
        <CardHeader className="text-center">
          <div className="mx-auto bg-primary/10 text-primary rounded-full p-3 w-fit mb-3">
            <Lightbulb className="h-10 w-10" />
          </div>
          <CardTitle className="text-3xl">Flash Information</CardTitle>
          <CardDescription>Quick insights and key facts from the source documents.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {flashInfo === undefined && ( // Still loading state on client before useEffect runs
            <div className="flex justify-center items-center min-h-[100px]">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          )}
          {flashInfo === null && ( // Explicitly no flash info found
            <Card className="bg-yellow-50 border-yellow-400 text-yellow-700">
              <CardContent className="p-4 flex items-start space-x-3">
                <AlertTriangle className="h-5 w-5 mt-0.5 shrink-0" />
                <div>
                  <p className="text-sm font-semibold">No Flash Information Available</p>
                  <p className="text-xs">
                    Flash information might not have been generated for the current documents, or no documents have been processed yet.
                    Please ask an administrator to <Link href="/admin/upload" className="underline hover:text-yellow-800">upload documents and generate content</Link>.
                  </p>
                </div>
              </CardContent>
            </Card>
          )}
          {flashInfo && flashInfo.length > 0 && (
            <div className="prose prose-sm sm:prose lg:prose-lg xl:prose-xl max-w-none p-4 border rounded-md bg-background shadow">
              {/* Render flashInfo which might contain markdown-like newlines */}
              {flashInfo.split('\\n').map((paragraph, index) => (
                <p key={index} className="mb-2 last:mb-0">{paragraph}</p>
              ))}
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button asChild className="w-full" variant="outline">
            <Link href="/">
              <Home className="mr-2 h-4 w-4" /> Back to Home
            </Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
